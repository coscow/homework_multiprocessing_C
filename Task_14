#include <stdio.h>
#include "mpi.h"
#include <algorithm>
#include <iostream>
#define n 1000
using namespace std;
void smod5(void* a, void* b, int* l, MPI_Datatype* type) {
	int i;
	for (i = 0; i < *l; i++)
		((int*)b)[i] = (((int*)a)[i] + ((int*)b)[i]) % 5;
}
void my_max(void* in, void* inout, int* l, MPI_Datatype* dtp)
{
	for (int i = 0; i < *l; i++)
		((int*)inout)[i] = max(((int*)in)[i], ((int*)inout)[i]);
}
int main(int argc, char** argv) {
	int rank, size, i;
	int a[n],b[n], b_val[n];
	MPI_Init(&argc, &argv);
	MPI_Op op;
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	for (i = 0; i < n; i++) a[i] = i + rank + 1;
	printf("process %d a[0] = %d\n", rank, a[0]);
	MPI_Op_create(&my_max, 1, &op);
	MPI_Reduce(a, b, n, MPI_INT, op, 0, MPI_COMM_WORLD);
	MPI_Op_free(&op);
	MPI_Reduce(a, b_val, n, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);

	if (rank == 0) {
		cout << "b[0] = " << b[0] << endl;
		cout << "b_val[0] = " << b_val[0] << endl;
		int temp = 0;
		for (int i = 0; i < n; i++) {
			if (b[i] != b_val[i]) {
				cout << "ERROR" << endl;
				break;
			}
			else {
				temp += 1;
			}
		}
		if (temp == n) {
			cout << "Resuts are correct" << endl;
		}

	}
}
